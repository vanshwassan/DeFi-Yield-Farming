{
  "address": "0x88176026Cca28f98212Cef925E980240C6C8D7b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapiServer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dappTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addAllowedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dapiServer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dappToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenEthPrice",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUserStakingBalanceEthValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "int224ToUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "DapiName",
          "type": "bytes32"
        }
      ],
      "name": "setDapiName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDapiMapping",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniqueTokensStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xae6488e3d5ffea26add5f551fadfbcd58a64b64e27cb924987c2fdc6a558fa4e",
  "receipt": {
    "to": null,
    "from": "0x09c623940ad5729A36d6982E9F8e132214FEaA3d",
    "contractAddress": "0x88176026Cca28f98212Cef925E980240C6C8D7b1",
    "transactionIndex": 3,
    "gasUsed": "979459",
    "logsBloom": "0x
    "blockHash": "0xf5ea97151038fd5dc1b68c77eee1cb703812ddd522b0d6dad7d45bb2286e5a08",
    "transactionHash": "0xae6488e3d5ffea26add5f551fadfbcd58a64b64e27cb924987c2fdc6a558fa4e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 31184273,
        "transactionHash": "0xae6488e3d5ffea26add5f551fadfbcd58a64b64e27cb924987c2fdc6a558fa4e",
        "address": "0x88176026Cca28f98212Cef925E980240C6C8D7b1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000009c623940ad5729a36d6982e9f8e132214feaa3d"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xf5ea97151038fd5dc1b68c77eee1cb703812ddd522b0d6dad7d45bb2286e5a08"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 31184273,
        "transactionHash": "0xae6488e3d5ffea26add5f551fadfbcd58a64b64e27cb924987c2fdc6a558fa4e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000009c623940ad5729a36d6982e9f8e132214feaa3d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000538381aa68d00000000000000000000000000000000000000000000000000054b73565f1e064f00000000000000000000000000000000000000000000190722d9e1730526f10600000000000000000000000000000000000000000000000005463b1e4477794f00000000000000000000000000000000000000000000190722df19ab1fcd7e06",
        "logIndex": 8,
        "blockHash": "0xf5ea97151038fd5dc1b68c77eee1cb703812ddd522b0d6dad7d45bb2286e5a08"
      }
    ],
    "blockNumber": 31184273,
    "cumulativeGasUsed": "1302952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71Da7A936fCaEd1Ee364Df106B12deF6D1Bf1f14",
    "0xF0623418925Af84B9f936f3b950053ABFa9d9dd1"
  ],
  "numDeployments": 1,
  "solcInputHash": "14cb3df5553d972d5fab9c526cc7a66f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapiServer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dappTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dapiServer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenEthPrice\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserStakingBalanceEthValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"int224ToUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"DapiName\",\"type\":\"bytes32\"}],\"name\":\"setDapiName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDapiMapping\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dapiServer()\":{\"notice\":\"DapiServer contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"TokenFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/dapis/DapiReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IDapiReader.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will read from a\\n/// DapiServer contract\\ncontract DapiReader is IDapiReader {\\n    /// @notice DapiServer contract address\\n    address public override dapiServer;\\n\\n    /// @param _dapiServer DapiServer contract address\\n    constructor(address _dapiServer) {\\n        setDapiServer(_dapiServer);\\n    }\\n\\n    /// @notice Called internally to update the DapiServer contract address\\n    /// @dev Inheriting contracts are highly recommended to expose this\\n    /// functionality to be able to migrate between DapiServer contracts.\\n    /// Otherwise, when the DapiServer goes out of service for any reason,\\n    /// the dependent contract will go defunct.\\n    /// Since this is a critical action, it needs to be protected behind\\n    /// mechanisms such as decentralized governance, timelocks, etc.\\n    /// @param _dapiServer DapiServer contract address\\n    function setDapiServer(address _dapiServer) internal {\\n        require(_dapiServer != address(0), \\\"dAPI server address zero\\\");\\n        dapiServer = _dapiServer;\\n    }\\n}\\n\",\"keccak256\":\"0xbbb143f391c0043cf3f508211982844e170b490e766fef3bfe14137c02d1bf57\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDapiServer.sol\\\";\\n\\ninterface IDapiReader {\\n    function dapiServer() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf5d638457b01dd6416a822b419b89a912b7886c786a44f3043b369b97e7d4e5\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../protocol/interfaces/IAirnodeRequester.sol\\\";\\n\\ninterface IDapiServer is IAirnodeRequester {\\n    event SetRrpBeaconUpdatePermissionStatus(\\n        address indexed sponsor,\\n        address indexed rrpBeaconUpdateRequester,\\n        bool status\\n    );\\n\\n    event RequestedRrpBeaconUpdate(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        address airnode,\\n        bytes32 templateId\\n    );\\n\\n    event RequestedRrpBeaconUpdateRelayed(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        address airnode,\\n        address relayer,\\n        bytes32 templateId\\n    );\\n\\n    event UpdatedBeaconWithRrp(\\n        bytes32 indexed beaconId,\\n        bytes32 requestId,\\n        int256 value,\\n        uint256 timestamp\\n    );\\n\\n    event RegisteredBeaconUpdateSubscription(\\n        bytes32 indexed subscriptionId,\\n        address airnode,\\n        bytes32 templateId,\\n        bytes parameters,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event UpdatedBeaconWithPsp(\\n        bytes32 indexed beaconId,\\n        bytes32 subscriptionId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int256 value,\\n        uint256 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithSignedData(\\n        bytes32 indexed dapiId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event AddedUnlimitedReader(address indexed unlimitedReader);\\n\\n    event SetDapiName(\\n        bytes32 indexed dapiName,\\n        bytes32 dataFeedId,\\n        address indexed sender\\n    );\\n\\n    function setRrpBeaconUpdatePermissionStatus(\\n        address rrpBeaconUpdateRequester,\\n        bool status\\n    ) external;\\n\\n    function requestRrpBeaconUpdate(\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function requestRrpBeaconUpdateRelayed(\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRrpBeaconUpdate(\\n        bytes32 requestId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) external;\\n\\n    function registerBeaconUpdateSubscription(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes memory conditions,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 subscriptionId);\\n\\n    function conditionPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view returns (bool);\\n\\n    function fulfillPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithBeacons(bytes32[] memory beaconIds)\\n        external\\n        returns (bytes32 beaconSetId);\\n\\n    function updateBeaconSetWithBeaconsAndReturnCondition(\\n        bytes32[] memory beaconIds,\\n        uint256 updateThresholdInPercentage\\n    ) external returns (bool);\\n\\n    function conditionPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external returns (bool);\\n\\n    function fulfillPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithSignedData(\\n        address[] memory airnodes,\\n        bytes32[] memory templateIds,\\n        uint256[] memory timestamps,\\n        bytes[] memory data,\\n        bytes[] memory signatures\\n    ) external returns (bytes32 beaconSetId);\\n\\n    function addUnlimitedReader(address unlimitedReader) external;\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(bytes32 dapiName)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function readDataFeedWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedValueWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value);\\n\\n    function readDataFeedWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedValueWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value);\\n\\n    function readerCanReadDataFeed(bytes32 dataFeedId, address reader)\\n        external\\n        view\\n        returns (bool);\\n\\n    function dataFeedIdToReaderToWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader\\n    )\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n\\n    function deriveBeaconId(address airnode, bytes32 templateId)\\n        external\\n        pure\\n        returns (bytes32 beaconId);\\n\\n    function deriveBeaconSetId(bytes32[] memory beaconIds)\\n        external\\n        pure\\n        returns (bytes32 beaconSetId);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function HUNDRED_PERCENT() external view returns (uint256);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function sponsorToRrpBeaconUpdateRequesterToPermissionStatus(\\n        address sponsor,\\n        address updateRequester\\n    ) external view returns (bool);\\n\\n    function subscriptionIdToBeaconId(bytes32 subscriptionId)\\n        external\\n        view\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6a09876c58ae7ba79531eb8276d6b9501add508c73b86a18b1bf641da194391f\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/IAirnodeRequester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAirnodeRequester {\\n    function airnodeProtocol() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2412446bb860cfaafa447d99d0f41ba6977e7f2b6b743a09c16b1ff58186309\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@api3/airnode-protocol-v1/contracts/dapis/DapiReader.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\ncontract TokenFarm is DapiReader, Ownable {\\r\\n    string public name = \\\"Dapp Token Farm\\\";\\r\\n    IERC20 public dappToken;\\r\\n\\r\\n    address[] public stakers;\\r\\n    // token > address\\r\\n    mapping(address => mapping(address => uint256)) public stakingBalance;\\r\\n    mapping(address => uint256) public uniqueTokensStaked;\\r\\n    mapping(address => bytes32) public tokenDapiMapping;\\r\\n    address[] allowedTokens;\\r\\n\\r\\n    \\r\\n    constructor(address _dapiServer, address _dappTokenAddress) DapiReader(_dapiServer) {\\r\\n        dappToken = IERC20(_dappTokenAddress);\\r\\n    }\\r\\n\\r\\n    function addAllowedTokens(address token) public onlyOwner {\\r\\n        allowedTokens.push(token);\\r\\n    }\\r\\n\\r\\n    function setDapiName(address token, bytes32 DapiName)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        tokenDapiMapping[token] = DapiName;\\r\\n    }\\r\\n\\r\\n    function stakeTokens(uint256 _amount, address token) public {\\r\\n        // Require amount greater than 0\\r\\n        require(_amount > 0, \\\"amount cannot be 0\\\");\\r\\n        if (tokenIsAllowed(token)) {\\r\\n            updateUniqueTokensStaked(msg.sender, token);\\r\\n            IERC20(token).transferFrom(msg.sender, address(this), _amount);\\r\\n            stakingBalance[token][msg.sender] =\\r\\n                stakingBalance[token][msg.sender] +\\r\\n                _amount;\\r\\n            if (uniqueTokensStaked[msg.sender] == 1) {\\r\\n                stakers.push(msg.sender);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Unstaking Tokens (Withdraw)\\r\\n    function unstakeTokens(address token) public {\\r\\n        // Fetch staking balance\\r\\n        uint256 balance = stakingBalance[token][msg.sender];\\r\\n        require(balance > 0, \\\"staking balance cannot be 0\\\");\\r\\n        IERC20(token).transfer(msg.sender, balance);\\r\\n        stakingBalance[token][msg.sender] = 0;\\r\\n        uniqueTokensStaked[msg.sender] = uniqueTokensStaked[msg.sender] - 1;\\r\\n    }\\r\\n\\r\\n    function getUserTotalValue(address user) public view returns (uint256) {\\r\\n        uint256 totalValue = 0;\\r\\n        if (uniqueTokensStaked[user] > 0) {\\r\\n            for (\\r\\n                uint256 allowedTokensIndex = 0;\\r\\n                allowedTokensIndex < allowedTokens.length;\\r\\n                allowedTokensIndex++\\r\\n            ) {\\r\\n                totalValue =\\r\\n                    totalValue +\\r\\n                    getUserStakingBalanceEthValue(\\r\\n                        user,\\r\\n                        allowedTokens[allowedTokensIndex]\\r\\n                    );\\r\\n            }\\r\\n        }\\r\\n        return totalValue;\\r\\n    }\\r\\n\\r\\n    function tokenIsAllowed(address token) public returns (bool) {\\r\\n        for (\\r\\n            uint256 allowedTokensIndex = 0;\\r\\n            allowedTokensIndex < allowedTokens.length;\\r\\n            allowedTokensIndex++\\r\\n        ) {\\r\\n            if (allowedTokens[allowedTokensIndex] == token) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function updateUniqueTokensStaked(address user, address token) internal {\\r\\n        if (stakingBalance[token][user] <= 0) {\\r\\n            uniqueTokensStaked[user] = uniqueTokensStaked[user] + 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function int224ToUint256(address token)\\r\\n    public\\r\\n    view \\r\\n    returns (uint256)\\r\\n    {\\r\\n        int224 tokenPrice = (getTokenEthPrice(token));\\r\\n        uint224 newTokenPrice = uint224(tokenPrice);\\r\\n        return newTokenPrice;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getUserStakingBalanceEthValue(address user, address token)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (uniqueTokensStaked[user] <= 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 newTokenPrice = (int224ToUint256(token));\\r\\n        uint256 stakBal = (stakingBalance[token][user]);\\r\\n        return\\r\\n            (stakBal * newTokenPrice) / (10**18);\\r\\n    }\\r\\n\\r\\n    // Issuing Token Rewards\\r\\n    function issueTokens() public onlyOwner {\\r\\n        // Issue tokens to all stakers\\r\\n        for (\\r\\n            uint256 stakersIndex = 0;\\r\\n            stakersIndex < stakers.length;\\r\\n            stakersIndex++\\r\\n        ) {\\r\\n            address recipient = stakers[stakersIndex];\\r\\n            dappToken.transfer(recipient, getUserTotalValue(recipient));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTokenEthPrice(address token) public view returns (int224 value) {\\r\\n        bytes32 DapiName = tokenDapiMapping[token];\\r\\n        (value) = IDapiServer(dapiServer).readDataFeedValueWithDapiName(\\r\\n                DapiName\\r\\n        );\\r\\n}\\r\\n}\\r\\n//18446744073709555618\",\"keccak256\":\"0x7f87524b27bbd0f07889ef85fe53c7d2fb6a8990d95b67b15f8ea65765332f33\"}},\"version\":1}",
  "bytecode": "0x60c0604052600f60808190526e4461707020546f6b656e204661726d60881b60a090815262000032916002919062000171565b503480156200004057600080fd5b50604051620011a4380380620011a4833981016040819052620000639162000234565b816200006f81620000a2565b506200007b336200011f565b600380546001600160a01b0319166001600160a01b039290921691909117905550620002a9565b6001600160a01b038116620000fd5760405162461bcd60e51b815260206004820152601860248201527f64415049207365727665722061646472657373207a65726f0000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200017f906200026c565b90600052602060002090601f016020900481019282620001a35760008555620001ee565b82601f10620001be57805160ff1916838001178555620001ee565b82800160010185558215620001ee579182015b82811115620001ee578251825591602001919060010190620001d1565b50620001fc92915062000200565b5090565b5b80821115620001fc576000815560010162000201565b80516001600160a01b03811681146200022f57600080fd5b919050565b600080604083850312156200024857600080fd5b620002538362000217565b9150620002636020840162000217565b90509250929050565b600181811c908216806200028157607f821691505b60208210811415620002a357634e487b7160e01b600052602260045260246000fd5b50919050565b610eeb80620002b96000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80639f03866b116100ad578063dd5b846711610071578063dd5b84671461029b578063df00018d146102be578063f2fde38b146102e4578063f5588385146102f7578063fd5e6dd11461030a57600080fd5b80639f03866b14610222578063af3f5e2214610235578063b83e023414610248578063cc81e06014610268578063d4a56d1e1461027b57600080fd5b80635eb186f8116100f45780635eb186f8146101c357806360ab5852146101ee5780636bf233d7146101f6578063715018a6146102095780638da5cb5b1461021157600080fd5b806306fdde03146101315780630bea440d1461014f578063171e44ea1461016457806329161a00146101775780632d1ad8b8146101b0575b600080fd5b61013961031d565b6040516101469190610c24565b60405180910390f35b61016261015d366004610c95565b6103ab565b005b610162610172366004610cc1565b61053f565b6101a2610185366004610cdc565b600560209081526000928352604080842090915290825290205481565b604051908152602001610146565b6101626101be366004610cc1565b6105bb565b6003546101d6906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b6101626106fb565b610162610204366004610d06565b610809565b61016261084f565b6001546001600160a01b03166101d6565b6000546101d6906001600160a01b031681565b6101a2610243366004610cc1565b610885565b6101a2610256366004610cc1565b60066020526000908152604090205481565b6101a2610276366004610cdc565b610909565b6101a2610289366004610cc1565b60076020526000908152604090205481565b6102ae6102a9366004610cc1565b610988565b6040519015158152602001610146565b6102d16102cc366004610cc1565b6109f2565b604051601b9190910b8152602001610146565b6101626102f2366004610cc1565b610a89565b6101a2610305366004610cc1565b610b21565b6101d6610318366004610d30565b610b3d565b6002805461032a90610d49565b80601f016020809104026020016040519081016040528092919081815260200182805461035690610d49565b80156103a35780601f10610378576101008083540402835291602001916103a3565b820191906000526020600020905b81548152906001019060200180831161038657829003601f168201915b505050505081565b600082116103f55760405162461bcd60e51b81526020600482015260126024820152710616d6f756e742063616e6e6f7420626520360741b60448201526064015b60405180910390fd5b6103fe81610988565b1561053b5761040d3382610b67565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd90606401602060405180830381600087803b15801561045b57600080fd5b505af115801561046f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104939190610d84565b506001600160a01b03811660009081526005602090815260408083203384529091529020546104c3908390610dbc565b6001600160a01b03821660009081526005602090815260408083203384528252808320939093556006905220546001141561053b57600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916331790555b5050565b6001546001600160a01b031633146105695760405162461bcd60e51b81526004016103ec90610dd4565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526005602090815260408083203384529091529020548061062c5760405162461bcd60e51b815260206004820152601b60248201527f7374616b696e672062616c616e63652063616e6e6f742062652030000000000060448201526064016103ec565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610d84565b506001600160a01b0382166000908152600560209081526040808320338452825280832083905560069091529020546106e790600190610e09565b336000908152600660205260409020555050565b6001546001600160a01b031633146107255760405162461bcd60e51b81526004016103ec90610dd4565b60005b6004548110156108065760006004828154811061074757610747610e20565b6000918252602090912001546003546001600160a01b0391821692501663a9059cbb8261077381610885565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610d84565b505080806107fe90610e36565b915050610728565b50565b6001546001600160a01b031633146108335760405162461bcd60e51b81526004016103ec90610dd4565b6001600160a01b03909116600090815260076020526040902055565b6001546001600160a01b031633146108795760405162461bcd60e51b81526004016103ec90610dd4565b6108836000610bd2565b565b6001600160a01b0381166000908152600660205260408120548190156109035760005b600854811015610901576108e384600883815481106108c9576108c9610e20565b6000918252602090912001546001600160a01b0316610909565b6108ed9083610dbc565b9150806108f981610e36565b9150506108a8565b505b92915050565b6001600160a01b03821660009081526006602052604081205461092e57506000610903565b600061093983610b21565b6001600160a01b03808516600090815260056020908152604080832093891683529290522054909150670de0b6b3a76400006109758383610e51565b61097f9190610e70565b95945050505050565b6000805b6008548110156109e957826001600160a01b0316600882815481106109b3576109b3610e20565b6000918252602090912001546001600160a01b031614156109d75750600192915050565b806109e181610e36565b91505061098c565b50600092915050565b6001600160a01b03818116600090815260076020526040808220548254915163386493e560e11b815260048101829052929390929116906370c927ca9060240160206040518083038186803b158015610a4a57600080fd5b505afa158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a829190610e92565b9392505050565b6001546001600160a01b03163314610ab35760405162461bcd60e51b81526004016103ec90610dd4565b6001600160a01b038116610b185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ec565b61080681610bd2565b600080610b2d836109f2565b6001600160e01b03169392505050565b60048181548110610b4d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0380821660009081526005602090815260408083209386168352929052205461053b576001600160a01b038216600090815260066020526040902054610bb5906001610dbc565b6001600160a01b0383166000908152600660205260409020555050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b81811015610c5157858101830151858201604001528201610c35565b81811115610c63576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610c9057600080fd5b919050565b60008060408385031215610ca857600080fd5b82359150610cb860208401610c79565b90509250929050565b600060208284031215610cd357600080fd5b610a8282610c79565b60008060408385031215610cef57600080fd5b610cf883610c79565b9150610cb860208401610c79565b60008060408385031215610d1957600080fd5b610d2283610c79565b946020939093013593505050565b600060208284031215610d4257600080fd5b5035919050565b600181811c90821680610d5d57607f821691505b60208210811415610d7e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d9657600080fd5b81518015158114610a8257600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610dcf57610dcf610da6565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015610e1b57610e1b610da6565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610e4a57610e4a610da6565b5060010190565b6000816000190483118215151615610e6b57610e6b610da6565b500290565b600082610e8d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610ea457600080fd5b815180601b0b8114610a8257600080fdfea2646970667358221220e5c29763c9c5f7caaf0ea6c7b6575a2b35686af6bf4e6bb9407cacb60760a8a764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80639f03866b116100ad578063dd5b846711610071578063dd5b84671461029b578063df00018d146102be578063f2fde38b146102e4578063f5588385146102f7578063fd5e6dd11461030a57600080fd5b80639f03866b14610222578063af3f5e2214610235578063b83e023414610248578063cc81e06014610268578063d4a56d1e1461027b57600080fd5b80635eb186f8116100f45780635eb186f8146101c357806360ab5852146101ee5780636bf233d7146101f6578063715018a6146102095780638da5cb5b1461021157600080fd5b806306fdde03146101315780630bea440d1461014f578063171e44ea1461016457806329161a00146101775780632d1ad8b8146101b0575b600080fd5b61013961031d565b6040516101469190610c24565b60405180910390f35b61016261015d366004610c95565b6103ab565b005b610162610172366004610cc1565b61053f565b6101a2610185366004610cdc565b600560209081526000928352604080842090915290825290205481565b604051908152602001610146565b6101626101be366004610cc1565b6105bb565b6003546101d6906001600160a01b031681565b6040516001600160a01b039091168152602001610146565b6101626106fb565b610162610204366004610d06565b610809565b61016261084f565b6001546001600160a01b03166101d6565b6000546101d6906001600160a01b031681565b6101a2610243366004610cc1565b610885565b6101a2610256366004610cc1565b60066020526000908152604090205481565b6101a2610276366004610cdc565b610909565b6101a2610289366004610cc1565b60076020526000908152604090205481565b6102ae6102a9366004610cc1565b610988565b6040519015158152602001610146565b6102d16102cc366004610cc1565b6109f2565b604051601b9190910b8152602001610146565b6101626102f2366004610cc1565b610a89565b6101a2610305366004610cc1565b610b21565b6101d6610318366004610d30565b610b3d565b6002805461032a90610d49565b80601f016020809104026020016040519081016040528092919081815260200182805461035690610d49565b80156103a35780601f10610378576101008083540402835291602001916103a3565b820191906000526020600020905b81548152906001019060200180831161038657829003601f168201915b505050505081565b600082116103f55760405162461bcd60e51b81526020600482015260126024820152710616d6f756e742063616e6e6f7420626520360741b60448201526064015b60405180910390fd5b6103fe81610988565b1561053b5761040d3382610b67565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038216906323b872dd90606401602060405180830381600087803b15801561045b57600080fd5b505af115801561046f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104939190610d84565b506001600160a01b03811660009081526005602090815260408083203384529091529020546104c3908390610dbc565b6001600160a01b03821660009081526005602090815260408083203384528252808320939093556006905220546001141561053b57600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b031916331790555b5050565b6001546001600160a01b031633146105695760405162461bcd60e51b81526004016103ec90610dd4565b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526005602090815260408083203384529091529020548061062c5760405162461bcd60e51b815260206004820152601b60248201527f7374616b696e672062616c616e63652063616e6e6f742062652030000000000060448201526064016103ec565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610d84565b506001600160a01b0382166000908152600560209081526040808320338452825280832083905560069091529020546106e790600190610e09565b336000908152600660205260409020555050565b6001546001600160a01b031633146107255760405162461bcd60e51b81526004016103ec90610dd4565b60005b6004548110156108065760006004828154811061074757610747610e20565b6000918252602090912001546003546001600160a01b0391821692501663a9059cbb8261077381610885565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610d84565b505080806107fe90610e36565b915050610728565b50565b6001546001600160a01b031633146108335760405162461bcd60e51b81526004016103ec90610dd4565b6001600160a01b03909116600090815260076020526040902055565b6001546001600160a01b031633146108795760405162461bcd60e51b81526004016103ec90610dd4565b6108836000610bd2565b565b6001600160a01b0381166000908152600660205260408120548190156109035760005b600854811015610901576108e384600883815481106108c9576108c9610e20565b6000918252602090912001546001600160a01b0316610909565b6108ed9083610dbc565b9150806108f981610e36565b9150506108a8565b505b92915050565b6001600160a01b03821660009081526006602052604081205461092e57506000610903565b600061093983610b21565b6001600160a01b03808516600090815260056020908152604080832093891683529290522054909150670de0b6b3a76400006109758383610e51565b61097f9190610e70565b95945050505050565b6000805b6008548110156109e957826001600160a01b0316600882815481106109b3576109b3610e20565b6000918252602090912001546001600160a01b031614156109d75750600192915050565b806109e181610e36565b91505061098c565b50600092915050565b6001600160a01b03818116600090815260076020526040808220548254915163386493e560e11b815260048101829052929390929116906370c927ca9060240160206040518083038186803b158015610a4a57600080fd5b505afa158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a829190610e92565b9392505050565b6001546001600160a01b03163314610ab35760405162461bcd60e51b81526004016103ec90610dd4565b6001600160a01b038116610b185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ec565b61080681610bd2565b600080610b2d836109f2565b6001600160e01b03169392505050565b60048181548110610b4d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0380821660009081526005602090815260408083209386168352929052205461053b576001600160a01b038216600090815260066020526040902054610bb5906001610dbc565b6001600160a01b0383166000908152600660205260409020555050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b81811015610c5157858101830151858201604001528201610c35565b81811115610c63576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610c9057600080fd5b919050565b60008060408385031215610ca857600080fd5b82359150610cb860208401610c79565b90509250929050565b600060208284031215610cd357600080fd5b610a8282610c79565b60008060408385031215610cef57600080fd5b610cf883610c79565b9150610cb860208401610c79565b60008060408385031215610d1957600080fd5b610d2283610c79565b946020939093013593505050565b600060208284031215610d4257600080fd5b5035919050565b600181811c90821680610d5d57607f821691505b60208210811415610d7e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610d9657600080fd5b81518015158114610a8257600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610dcf57610dcf610da6565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015610e1b57610e1b610da6565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610e4a57610e4a610da6565b5060010190565b6000816000190483118215151615610e6b57610e6b610da6565b500290565b600082610e8d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610ea457600080fd5b815180601b0b8114610a8257600080fdfea2646970667358221220e5c29763c9c5f7caaf0ea6c7b6575a2b35686af6bf4e6bb9407cacb60760a8a764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "dapiServer()": {
        "notice": "DapiServer contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "dapiServer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 479,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2051,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2054,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "dappToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1200"
      },
      {
        "astId": 2057,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "stakers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2063,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "stakingBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2067,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "uniqueTokensStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2071,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "tokenDapiMapping",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 2074,
        "contract": "contracts/Staking.sol:TokenFarm",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1200": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}